"""
Parsing of command line arguments for mosaic.

"""
import argparse

def parse_args(argstr=""):
    """
    Parse command line args as a dict.

    Parameters
    ----------
    argstr : str, optional
        The command line string that will be parsed. Default: "".

    Returns
    -------
    dict[str, str]
        Command line arguments as keyword arguments.

    """
    parser = argparse.ArgumentParser()

    parser.add_argument("input_file",
                        help="Path to a .geo file generated by Neper.")

    parser.add_argument("output_files",
                        nargs="*",
                        help=("Path of the output file(s). Type is determined "
                              "based on type (.geo, .msh, .inp).")
                        )

    parser.add_argument("-v", "--verbose",
                        action="store_true",
                        default=False,
                        help="Increase output verbosity.")

    parser.add_argument("--show_gui",
                        action="store_true",
                        default=False,
                        help="Open the gmsh GUI after the model was imported.")

    parser.add_argument("--show_gmsh_output",
                        action="store_true",
                        default=False,
                        help="Show gmsh output on stdout.")
    
    parser.add_argument("-x0", "--box_x_position",
                        type=float,
                        default=0.0,
                        help="x-origin of the rectilinear domain.")
    
    parser.add_argument("-y0", "--box_y_position",
                        type=float,
                        default=0.0,
                        help="y-origin of the rectilinear domain.")
    
    parser.add_argument("-z0", "--box_z_position",
                        type=float,
                        default=0.0,
                        help="z-origin of the rectilinear domain.")
    
    parser.add_argument("-cl", "--element_size",
                        type=float,
                        default=0.1,
                        help="Characteristic length of the elements.")
                        
    parser.add_argument("--ciGen",
						action="store_true",
						default=False,
						help="Save .msh files in format compatible with ciGen.")

    args = parser.parse_args(argstr)

    return vars(args)
